#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socialm-api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const ChatMessage = require('../models/ChatMessage');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const io = require('socket.io')(server, {
  cors: { origin: [process.env.CLIENT] },
});

io.on('connection', (socket, next) => {
  const token =
    socket.handshake.query.Authorization ||
    socket.handshake.query.authorization ||
    '';
  if (!token) {
    return;
  }

  jwt.verify(token, process.env.JWTSECRET, async (err, authData) => {
    if (err) {
      return;
    }
    socket.on('send-message', (message) => {
      if (message.message === '') return;
      const newChatMessage = new ChatMessage({
        author: authData.user._id,
        message: message.message.trim(),
      });
      newChatMessage.save(async (error, value) => {
        if (error) {
          return;
        } else {
          io.emit(
            'receive-message',
            await value.populate('author', 'username profile_picture'),
          );
        }
      });
    });

    socket.on('check-notifications', async () => {
      const user = await User.findById(authData.user._id);
      if (user.unread_notifications.length) {
        io.to(socket.id).emit('unread-notification', true);
      } else {
        io.to(socket.id).emit('unread-notification', false);
      }
    });
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
